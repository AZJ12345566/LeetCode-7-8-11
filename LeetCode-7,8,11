class Solution {
/*
7.整数反转
给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。
假设环境不允许存储 64 位整数（有符号或无符号）。
*/
  public int reverse(int x) {
    int res = 0;
    while(x != 0) {
      int tmp = x % 10;
      if(res > 214748364 || (res == 214748364 && tmp > 7)) {
        return 0;
      }
      if(res < -214748364 || (res == 214748364 && tmp < -8)) {
        return 0;
      }
      res = res * 10 + tmp;
      x /= 10;
    }
    return res;
  }
/*
8.字符串转换整数
请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
函数 myAtoi(string s) 的算法如下：
读入字符串并丢弃无用的前导空格
检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
返回整数作为最终结果。
*/
  public int myAtoi(String s) {
    char[] arr = s.trim().toCharArray();
    if(arr.length == 0) {
      return 0;
    }
    int res = 0;
    int bndry = Integer.MAX_VALUE / 10;
    int i = 1;
    int sign = 1;
    if(arr[0] == '-') {
      sign = -1;
    } else if(arr[0] != '+') {
      i = 0;
    }
    for(int j = i; j < arr.length; j++) {
      if(arr[j] < '0' || arr[j] > '9') {
        break;
      }
      if(res > bndry || (res == bndry && arr[j] > '7')) {
        return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
      }
      res = res * 10 + (arr[j] - '0');
    }
    return sign * res;
  }
/*
11.盛最多水的容器
给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
返回容器可以储存的最大水量。
说明：你不能倾斜容器。
*/
  public int maxArea(int[] height) {
    int res = 0;
    int left = 0;
    int right = height.length - 1;
    while(left < right) {
      res = height[left] < height[right] ?
            Math.max(res, (right - left) * height[left++]) :
            Math.max(res, (right - left) * height[right--]);
    }
    return res;
  }
}
